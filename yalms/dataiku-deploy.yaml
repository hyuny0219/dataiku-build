apiVersion: apps/v1
kind: Deployment
metadata:
  name: dss-design
  labels:
    app: dataiku
  namespace: dataiku
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dss-design
  template:
    metadata:
      labels:
        app: dss-design
    spec:
      containers:
        - name: dss-v14
          image: eunhong/dss-engine:14.0.0
          imagePullPolicy: IfNotPresent
          args: ["start"]   # entrypoint.sh에 인자로 넘겨질 명령어
          ports:
            - containerPort: 11000
          volumeMounts:
          - name: license-file
            mountPath: /data/license.json
            subPath: license.json
          - name: data
            mountPath: /data
          - name: config-volume
            mountPath: /opt/config
      volumes:
        - name: license-file
          configMap:
            name: license.json
        - name: data
          persistentVolumeClaim:
            claimName: dss-data
        - name: config-volume
          emptyDir: {}


      # localhost registry를 사용할 때 추가 옵션
      imagePullSecrets: []  # 인증이 필요하면 여기에 secret 추가

---
apiVersion: v1
kind: Service
metadata:
  name: dss-design
  namespace: dataiku
spec:
  type: LoadBalancer
  selector:
    app: dss-design
  ports:
    - port: 8089
      targetPort: 11000

---
apiVersion: v1
items:
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: dss-data
    namespace: dataiku
  spec:
    accessModes:
    - ReadWriteMany
    resources:
      requests:
        storage: 10Gi
    storageClassName: nfs-sc
kind: List
metadata:
  resourceVersion: ""
